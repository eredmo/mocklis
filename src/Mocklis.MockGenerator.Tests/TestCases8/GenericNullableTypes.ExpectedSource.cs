// <auto-generated />

#nullable enable

namespace Test
{
    partial class TestClass<T>
    {
        public global::Mocklis.Core.PropertyMock<T?> Property { get; }

        T? global::Test.ITestClass<T>.Property { get => Property.Value; set => Property.Value = value; }

        public global::Mocklis.Core.IndexerMock<(T? p1, T? p2), T?> Item { get; }

        T? global::Test.ITestClass<T>.this[T? p1, T? p2] { get => Item[(p1, p2)]; set => Item[(p1, p2)] = value; }

        public global::Mocklis.Core.FuncMethodMock<T?, T?> Test { get; }

        T? global::Test.ITestClass<T>.Test(T? item) => Test.Call(item);

        protected TestClass() : base()
        {
            this.Property = new global::Mocklis.Core.PropertyMock<T?>(this, "TestClass", "ITestClass", "Property", "Property", global::Mocklis.Core.Strictness.Lenient);
            this.Item = new global::Mocklis.Core.IndexerMock<(T? p1, T? p2), T?>(this, "TestClass", "ITestClass", "this[]", "Item", global::Mocklis.Core.Strictness.Lenient);
            this.Test = new global::Mocklis.Core.FuncMethodMock<T?, T?>(this, "TestClass", "ITestClass", "Test", "Test", global::Mocklis.Core.Strictness.Lenient);
        }
    }
}
