// <auto-generated />

namespace Test
{
    partial class TestClass
    {
        public global::Mocklis.Core.ActionMethodMock<(int Item2_, int anotherItem)> Item2_ { get; }

        void global::Test.ITestClass.Item2_(int Item2, int anotherItem) => Item2_.Call((Item2, anotherItem));

        public global::Mocklis.Core.FuncMethodMock<string, (int returnValue, string Item3_)> Item3_ { get; }

        int global::Test.ITestClass.Item3_(ref string Item3)
        {
            var tmp = Item3_.Call(Item3);
            Item3 = tmp.Item3_;
            return tmp.returnValue;
        }

        public global::Mocklis.Core.FuncMethodMock<T, (int returnValue, T Item4_)> Item4_ { get; }

        int global::Test.ITestClass.Item4_(ref T Item4)
        {
            var tmp = Item4_.Call(Item4);
            Item4 = tmp.Item4_;
            return tmp.returnValue;
        }

        public TestClass() : base()
        {
            this.Item2_ = new global::Mocklis.Core.ActionMethodMock<(int Item2_, int anotherItem)>(this, "TestClass", "ITestClass", "Item2_", "Item2_", global::Mocklis.Core.Strictness.Lenient);
            this.Item3_ = new global::Mocklis.Core.FuncMethodMock<string, (int returnValue, string Item3_)>(this, "TestClass", "ITestClass", "Item3_", "Item3_", global::Mocklis.Core.Strictness.Lenient);
            this.Item4_ = new global::Mocklis.Core.FuncMethodMock<T, (int returnValue, T Item4_)>(this, "TestClass", "ITestClass", "Item4_", "Item4_", global::Mocklis.Core.Strictness.Lenient);
        }
    }
}
