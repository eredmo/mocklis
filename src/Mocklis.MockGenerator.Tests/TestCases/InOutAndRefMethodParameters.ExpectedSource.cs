// <auto-generated />

namespace Test
{
    partial class TestClass
    {
        public global::Mocklis.Core.FuncMethodMock<string, (bool returnValue, int result)> TryParse { get; }

        bool global::Test.ITestClass.TryParse(string source, out int result)
        {
            var tmp = TryParse.Call(source);
            result = tmp.result;
            return tmp.returnValue;
        }

        public global::Mocklis.Core.FuncMethodMock<(int t1, int t2), int> Test { get; }

        int global::Test.ITestClass.Test(in int t1, in int t2) => Test.Call((t1, t2));

        public global::Mocklis.Core.FuncMethodMock<string, string> Mutate { get; }

        void global::Test.ITestClass.Mutate(ref string value)
        {
            value = Mutate.Call(value);
        }

        public TestClass() : base()
        {
            this.TryParse = new global::Mocklis.Core.FuncMethodMock<string, (bool returnValue, int result)>(this, "TestClass", "ITestClass", "TryParse", "TryParse", global::Mocklis.Core.Strictness.Lenient);
            this.Test = new global::Mocklis.Core.FuncMethodMock<(int t1, int t2), int>(this, "TestClass", "ITestClass", "Test", "Test", global::Mocklis.Core.Strictness.Lenient);
            this.Mutate = new global::Mocklis.Core.FuncMethodMock<string, string>(this, "TestClass", "ITestClass", "Mutate", "Mutate", global::Mocklis.Core.Strictness.Lenient);
        }
    }
}
