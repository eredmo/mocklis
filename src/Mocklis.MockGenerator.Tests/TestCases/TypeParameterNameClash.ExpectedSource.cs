// <auto-generated />

namespace Test
{
    partial class TestClass<T>
    {
        protected virtual void Test<T0>(global::Test.RefStruct refStruct, T outer, T0 parameter)
        {
            throw new global::Mocklis.Core.MockMissingException(global::Mocklis.Core.MockType.VirtualMethod, "TestClass", "ITestClass", "Test", "Test");
        }

        void global::Test.ITestClass<T>.Test<T0>(global::Test.RefStruct refStruct, T outer, T0 parameter) => Test<T0>(refStruct, outer, parameter);

        protected virtual void TestWithConstraint<T0>(global::Test.RefStruct refStruct, T outer, T0 parameter) where T0 : T
        {
            throw new global::Mocklis.Core.MockMissingException(global::Mocklis.Core.MockType.VirtualMethod, "TestClass", "ITestClass", "TestWithConstraint", "TestWithConstraint");
        }

        void global::Test.ITestClass<T>.TestWithConstraint<T0>(global::Test.RefStruct refStruct, T outer, T0 parameter) => TestWithConstraint<T0>(refStruct, outer, parameter);

        private readonly global::Mocklis.Core.TypedMockProvider _testWithRef = new global::Mocklis.Core.TypedMockProvider();

        public global::Mocklis.Core.FuncMethodMock<T0> TestWithRef<T0>()
        {
            var key = new[] { typeof(T0) };
            return (global::Mocklis.Core.FuncMethodMock<T0>)TestWithRef.GetOrAdd(key, keyString => new global::Mocklis.Core.FuncMethodMock<T0>(this, "TestClass", "ITestClass", "TestWithRef" + keyString, "TestWithRef" + keyString, global::Mocklis.Core.Strictness.Lenient));
        }

        ref readonly T0 global::Test.ITestClass<T>.TestWithRef<T0>() => ref global::Mocklis.Core.ByRef<T0>.Wrap(TestWithRef<T0>().Call());
    }
}
