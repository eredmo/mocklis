// <auto-generated />

namespace Test
{
    partial class TestClass
    {
        protected virtual void Restricted(global::System.RuntimeArgumentHandle runtimeArgumentHandle)
        {
            throw new global::Mocklis.Core.MockMissingException(global::Mocklis.Core.MockType.VirtualMethod, "TestClass", "ITestClass", "Restricted", "Restricted");
        }

        void global::Test.ITestClass.Restricted(global::System.RuntimeArgumentHandle runtimeArgumentHandle) => Restricted(runtimeArgumentHandle);

        protected virtual void Restricted0(global::System.ArgIterator argIterator)
        {
            throw new global::Mocklis.Core.MockMissingException(global::Mocklis.Core.MockType.VirtualMethod, "TestClass", "ITestClass", "Restricted", "Restricted0");
        }

        void global::Test.ITestClass.Restricted(global::System.ArgIterator argIterator) => Restricted0(argIterator);

        protected virtual void Restricted1(global::System.TypedReference typedReference)
        {
            throw new global::Mocklis.Core.MockMissingException(global::Mocklis.Core.MockType.VirtualMethod, "TestClass", "ITestClass", "Restricted", "Restricted1");
        }

        void global::Test.ITestClass.Restricted(global::System.TypedReference typedReference) => Restricted1(typedReference);
    }
}
