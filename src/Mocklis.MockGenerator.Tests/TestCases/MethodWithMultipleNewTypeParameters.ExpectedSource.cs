// <auto-generated />

namespace Test
{
    partial class TestClass
    {
        public global::Mocklis.Core.FuncMethodMock<(T1 param1, T2 param2), string> Combine { get; }

        string global::Test.ITestClass.Combine(T1 param1, T2 param2) => Combine.Call((param1, param2));

        public global::Mocklis.Core.FuncMethodMock<(T1 param1, T2 param2, T3 param3), string> Combine0 { get; }

        string global::Test.ITestClass.Combine(T1 param1, T2 param2, T3 param3) => Combine0.Call((param1, param2, param3));

        public global::Mocklis.Core.FuncMethodMock<(T1 param1, T2 param2, T3 param3, T4 param4), string> Combine1 { get; }

        string global::Test.ITestClass.Combine(T1 param1, T2 param2, T3 param3, T4 param4) => Combine1.Call((param1, param2, param3, param4));

        public TestClass() : base()
        {
            this.Combine = new global::Mocklis.Core.FuncMethodMock<(T1 param1, T2 param2), string>(this, "TestClass", "ITestClass", "Combine", "Combine", global::Mocklis.Core.Strictness.Lenient);
            this.Combine0 = new global::Mocklis.Core.FuncMethodMock<(T1 param1, T2 param2, T3 param3), string>(this, "TestClass", "ITestClass", "Combine", "Combine0", global::Mocklis.Core.Strictness.Lenient);
            this.Combine1 = new global::Mocklis.Core.FuncMethodMock<(T1 param1, T2 param2, T3 param3, T4 param4), string>(this, "TestClass", "ITestClass", "Combine", "Combine1", global::Mocklis.Core.Strictness.Lenient);
        }
    }
}
